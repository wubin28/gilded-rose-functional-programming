{"output":"GildedRoseTest.java:42: error: method updateItemsQualityAndSellIn in class GildedRose cannot be applied to given types;\n            GildedRose.updateItemsQualityAndSellIn(items, \n                      ^\n  required: List<Item>\n  found: List<Item>,Predicate<Item>,Predicate<Item>,Function<Item,Item>\n  reason: actual and formal argument lists differ in length\n1 error\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","instructions":"Kata: Gilded Rose\n\nHi and welcome to team Gilded Rose. As you know, we are a small inn with \na prime location in a prominent city ran by a friendly innkeeper named \nAllison. We also buy and sell only the finest goods. Unfortunately, our \ngoods are constantly degrading in quality as they approach their sell by \ndate. We have a system in place that updates our inventory for us. It was \ndeveloped by a no-nonsense type named Leeroy, who has moved on to new \nadventures. Your task is to add the new feature to our system so that \nwe can begin selling a new category of items. First an introduction to \nour system:\n\n• All items have a SellIn value which denotes the number of days we \nhave to sell the item\n• All items have a Quality value which denotes how valuable the item is\n• At the end of each day our system lowers both values for every item\n\nPretty simple, right? Well this is where it gets interesting:\n\n• Once the sell by date has passed, Quality degrades twice as fast\n• The Quality of an item is never negative\n• “Aged Brie” actually increases in Quality the older it gets\n• The Quality of an item is never more than 50\n• “Sulfuras”, being a legendary item, never has to be sold or decreases \nin Quality\n• “Backstage passes”, like aged brie, increases in Quality as it’s \nSellIn value approaches; Quality increases by 2 when there are 10 days \nor less and by 3 when there are 5 days or less but Quality drops to 0 \nafter the concert\n\nWe have recently signed a supplier of conjured items. This requires \nan update to our system:\n\n• “Conjured” items degrade in Quality twice as fast as normal items\n\nFeel free to make any changes to the updateQuality() method and add any \nnew code as long as everything still works correctly. However, do not \nalter the Item class or Items property as those belong to the goblin \nin the corner who will insta-rage and one-shot you as he doesn’t \nbelieve in shared code ownership (you can make the updateQuality() method \nand Items property static if you like, we’ll cover for you).\n\nJust for clarification, an item can never have its Quality increase \nabove 50, however “Sulfuras” is a legendary item and as such its \nQuality is 80 and it never alters.\n","GildedRose.java":"import java.util.function.Predicate;\nimport java.util.function.Function;\nimport java.util.List;\n\nclass GildedRose {\n    Item[] items;\n\n    public GildedRose(Item[] items) {\n        this.items = items;\n    }\n\n    public void updateQuality() {\n        for (int i = 0; i < items.length; i++) {\n            StrategyItem strategyItem = StrategyFactory.create(items[i].name);\n            strategyItem.handle(items[i]);\n        }\n    }\n \n    public static Predicate<Item> isNormalItem() {\n        return item -> !item.name.equals(\"Aged Brie\") && \n                    !item.name.equals(\"Sulfuras, Hand of Ragnaros\") &&\n                    !item.name.equals(\"Backstage passes to a TAFKAL80ETC concert\") &&\n                    !item.name.equals(\"Conjured\");\n    }\n\n    public static Predicate<Item> isAgedBrie() {\n        return item -> item.name.equals(\"Aged Brie\");\n    }\n\n    public static Predicate<Item> isSulfuras() {\n        return item -> item.name.equals(\"Sulfuras, Hand of Ragnaros\");\n    }\n\n    public static Predicate<Item> isBackstagePasses() {\n        return item -> item.name.equals(\"Backstage passes to a TAFKAL80ETC concert\");\n    }\n\n    public static Predicate<Item> isConjured() {\n        return item -> item.name.equals(\"Conjured\");\n    }\n\n    public static Predicate<Item> isSellInGreaterThan0() {\n        return item -> item.sellIn > 0;\n    }\n\n    public static Predicate<Item> isSellInNoMoreThan0() {\n        return item -> item.sellIn <= 0;\n    }\n\n    public static Predicate<Item> isSellInGreaterThan10() {\n        return item -> item.sellIn > 10;\n    }\n\n    public static Predicate<Item> isSellInBetween5And10() {\n        return item -> item.sellIn > 5 && item.sellIn <= 10;\n    }\n\n    public static Predicate<Item> isSellInBetween0And5() {\n        return item -> item.sellIn > 0 && item.sellIn <= 5;\n    }\n\n    public static Function<Item, Item> generateUpdatedNormalItems() {\n        return item -> {\n            int updatedQuality = item.quality;\n\n            if (item.quality > 0) {                    \n                updatedQuality = item.quality - 1;\n            }\n\n            int updatedSellIn = item.sellIn - 1;\n\n            if (updatedSellIn < 0) {\n         \n                if (updatedQuality > 0) {  \n                    updatedQuality = item.quality - 2;                           \n                }\n            }\n            \n            return new Item(item.name, updatedSellIn, updatedQuality);\n        };\n    }\n\n    public static Function<Item, Item> generateUpdatedAgedBrie() {\n        return item -> {\n            int updatedQuality = item.quality;\n\n            if (item.quality < 50) {                    \n                updatedQuality = item.quality + 1;\n            }\n\n            int updatedSellIn = item.sellIn - 1;\n\n            if (updatedSellIn < 0) {\n         \n                if (updatedQuality < 50) {  \n                    updatedQuality = item.quality + 2;                           \n                }\n            }\n\n            return new Item(item.name, updatedSellIn, updatedQuality);\n        };\n    }\n\n    public static Function<Item, Item> generateUpdatedSulfuras() {\n        return item -> item;\n    }\n\n    public static Function<Item, Item> generateUpdatedBackstagePasses() {\n        return item -> {\n            int updatedQuality = item.quality;\n\n            if (item.quality < 50) {                    \n                updatedQuality = item.quality + 1;\n                if (item.sellIn < 11) {\n                    if (item.quality < 50) {\n                    updatedQuality = item.quality + 2;\n                    }\n                }\n                if (item.sellIn < 6) {\n                    if (item.quality < 50) {\n                    updatedQuality = item.quality + 3;\n                    }\n                }\n            }\n\n            int updatedSellIn = item.sellIn - 1;\n\n            if (updatedSellIn < 0) {\n                updatedQuality = 0;\n            }\n\n            return new Item(item.name, updatedSellIn, updatedQuality);\n        };\n    }\n\n    public static Function<Item, Item> generateUpdatedConjured() {\n        return item -> {\n            int updatedQuality = item.quality;\n\n            if (item.quality > 0) {                    \n                updatedQuality = item.quality - 2;\n            }\n\n            int updatedSellIn = item.sellIn - 1;\n\n            if (updatedSellIn < 0) {\n                if (updatedQuality > 0) {  \n                    updatedQuality = item.quality - 4;\n                }\n            }\n\n            return new Item(item.name, updatedSellIn, updatedQuality);\n        };\n    }\n\n    public static List<Item> updateItemsQualityAndSellIn(List<Item> items) {\n        return null;\n    }\n}","GildedRoseTest.java":"import static org.junit.Assert.*;\nimport org.junit.Test;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class GildedRoseTest {\n\n    @Test\n    public void normal_item_quality_should_decrease_by_1_if_sellin_greater_than_0() {\n        Item[] items = new Item[] { new Item(\"Normal item\", 8, 10) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Normal item\", app.items[0].name);\n        assertEquals(7, app.items[0].sellIn);\n        assertEquals(9, app.items[0].quality);\n    }\n\n    @Test\n    public void normal_item_quality_should_decrease_by_1_if_sellin_greater_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 2, 5),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 22, 35),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 9, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> updatedItemStream = items.stream()\n            .filter(GildedRose.isNormalItem())\n            .filter(GildedRose.isSellInGreaterThan0())\n            .map(GildedRose.generateUpdatedNormalItems());\n\n        List<Item> itemsUpdated = \n            updatedItemStream.collect(Collectors.toList());\n\n        List<Item> anotherItemsUpdated = \n            GildedRose.updateItemsQualityAndSellIn(items, \n                GildedRose.isNormalItem(), \n                GildedRose.isSellInGreaterThan0(),\n                GildedRose.generateUpdatedNormalItems());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(0, itemsUpdated.get(0).sellIn);\n        assertEquals(9, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void normal_item_quality_should_decrease_by_2_if_sellin_no_more_than_0() {\n        Item[] items = new Item[] { new Item(\"Normal item\", 0, 10) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Normal item\", app.items[0].name);\n        assertEquals(-1, app.items[0].sellIn);\n        assertEquals(8, app.items[0].quality);\n    }\n\n    @Test\n    public void normal_item_quality_should_decrease_by_2_if_sellin_no_more_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item new\", 1, 10),\n            new Item(\"Normal item old\", 0, 9),\n            new Item(\"Aged Brie\", 2, 5),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 22, 35),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 9, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isNormalItem())\n            .filter(GildedRose.isSellInNoMoreThan0())\n            .map(GildedRose.generateUpdatedNormalItems());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(-1, itemsUpdated.get(0).sellIn);\n        assertEquals(7, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Aged_Brie_quality_should_increase_by_1_if_sellin_greater_than_0() {\n        Item[] items = new Item[] { new Item(\"Aged Brie\", 8, 10) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Aged Brie\", app.items[0].name);\n        assertEquals(7, app.items[0].sellIn);\n        assertEquals(11, app.items[0].quality);\n    }\n\n    @Test\n    public void Aged_Brie_quality_should_increase_by_1_if_sellin_greater_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 22, 35),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 9, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isAgedBrie())\n            .filter(GildedRose.isSellInGreaterThan0())\n            .map(GildedRose.generateUpdatedAgedBrie());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(0, itemsUpdated.get(0).sellIn);\n        assertEquals(6, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Aged_Brie_quality_should_increase_by_2_if_sellin_no_more_than_0() {\n        Item[] items = new Item[] { new Item(\"Aged Brie\", 0, 10) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Aged Brie\", app.items[0].name);\n        assertEquals(-1, app.items[0].sellIn);\n        assertEquals(12, app.items[0].quality);\n    }\n\n    @Test\n    public void Aged_Brie_quality_should_increase_by_2_if_sellin_no_more_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 22, 35),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 9, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isAgedBrie())\n            .filter(GildedRose.isSellInNoMoreThan0())\n            .map(GildedRose.generateUpdatedAgedBrie());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(-1, itemsUpdated.get(0).sellIn);\n        assertEquals(8, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Sulfuras_quality_should_always_80_when_sellin_greater_than_0() {\n        Item[] items = new Item[] { new Item(\"Sulfuras, Hand of Ragnaros\", 1, 80) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Sulfuras, Hand of Ragnaros\", app.items[0].name);\n        assertEquals(1, app.items[0].sellIn);\n        assertEquals(80, app.items[0].quality);\n    }\n\n    @Test\n    public void Sulfuras_quality_should_always_80_when_sellin_greater_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 22, 35),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 2, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isSulfuras())\n            .filter(GildedRose.isSellInGreaterThan0())\n            .map(GildedRose.generateUpdatedSulfuras());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(2, itemsUpdated.get(0).sellIn);\n        assertEquals(80, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Sulfuras_quality_should_always_80_when_sellin_no_more_than_0() {\n        Item[] items = new Item[] { new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Sulfuras, Hand of Ragnaros\", app.items[0].name);\n        assertEquals(0, app.items[0].sellIn);\n        assertEquals(80, app.items[0].quality);\n    }\n\n    @Test\n    public void Sulfuras_quality_should_always_80_when_sellin_no_more_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 22, 35),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isSulfuras())\n            .filter(GildedRose.isSellInNoMoreThan0())\n            .map(GildedRose.generateUpdatedSulfuras());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(0, itemsUpdated.get(0).sellIn);\n        assertEquals(80, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Backstage_Passes_quality_should_equal_0_when_sellin_no_more_than_0() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", -3, 30) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Backstage passes to a TAFKAL80ETC concert\", app.items[0].name);\n        assertEquals(-4, app.items[0].sellIn);\n        assertEquals(0, app.items[0].quality);\n    }\n\n    @Test\n    public void Backstage_Passes_quality_should_equal_0_when_sellin_no_more_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 0, 35),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 34),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 33),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 32),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isBackstagePasses())\n            .filter(GildedRose.isSellInNoMoreThan0())\n            .map(GildedRose.generateUpdatedBackstagePasses());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(-1, itemsUpdated.get(0).sellIn);\n        assertEquals(0, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Backstage_Passes_quality_should_increase_by_1_when_sellin_greater_than_10() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 22) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Backstage passes to a TAFKAL80ETC concert\", app.items[0].name);\n        assertEquals(10, app.items[0].sellIn);\n        assertEquals(23, app.items[0].quality);\n    }\n\n    @Test\n    public void Backstage_Passes_quality_should_increase_by_1_when_sellin_greater_than_10_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 0, 35),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 34),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 33),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 32),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isBackstagePasses())\n            .filter(GildedRose.isSellInGreaterThan10())\n            .map(GildedRose.generateUpdatedBackstagePasses());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(10, itemsUpdated.get(0).sellIn);\n        assertEquals(35, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Backstage_Passes_quality_should_increase_by_2_when_sellin_between_5_and_10() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 22) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Backstage passes to a TAFKAL80ETC concert\", app.items[0].name);\n        assertEquals(9, app.items[0].sellIn);\n        assertEquals(24, app.items[0].quality);\n    }\n\n    @Test\n    public void Backstage_Passes_quality_should_increase_by_2_when_sellin_between_5_and_10_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 0, 35),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 34),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 33),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 32),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isBackstagePasses())\n            .filter(GildedRose.isSellInBetween5And10())\n            .map(GildedRose.generateUpdatedBackstagePasses());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(9, itemsUpdated.get(0).sellIn);\n        assertEquals(35, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Backstage_Passes_quality_should_increase_by_3_when_sellin_between_0_and_5() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 22) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Backstage passes to a TAFKAL80ETC concert\", app.items[0].name);\n        assertEquals(4, app.items[0].sellIn);\n        assertEquals(25, app.items[0].quality);\n    }\n\n    @Test\n    public void Backstage_Passes_quality_should_increase_by_3_when_sellin_between_0_and_5_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 0, 35),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 34),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 33),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 32),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80),\n            new Item(\"Conjured\", 12, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isBackstagePasses())\n            .filter(GildedRose.isSellInBetween0And5())\n            .map(GildedRose.generateUpdatedBackstagePasses());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(4, itemsUpdated.get(0).sellIn);\n        assertEquals(35, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Conjured_quality_should_decrease_by_2_when_sellin_greater_than_0() {\n        Item[] items = new Item[] { new Item(\"Conjured\", 5, 22) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Conjured\", app.items[0].name);\n        assertEquals(4, app.items[0].sellIn);\n        assertEquals(20, app.items[0].quality);\n    }\n\n    @Test\n    public void Conjured_quality_should_decrease_by_2_when_sellin_greater_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 0, 35),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 34),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 33),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 32),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80),\n            new Item(\"Conjured\", 1, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isConjured())\n            .filter(GildedRose.isSellInGreaterThan0())\n            .map(GildedRose.generateUpdatedConjured());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(0, itemsUpdated.get(0).sellIn);\n        assertEquals(43, itemsUpdated.get(0).quality);\n    }\n\n    @Test\n    public void Conjured_quality_should_decrease_by_4_when_no_more_than_0() {\n        Item[] items = new Item[] { new Item(\"Conjured\", -2, 22) };\n        GildedRose app = new GildedRose(items);\n\n        app.updateQuality();\n\n        assertEquals(\"Conjured\", app.items[0].name);\n        assertEquals(-3, app.items[0].sellIn);\n        assertEquals(18, app.items[0].quality);\n    }\n\n    @Test\n    public void Conjured_quality_should_decrease_by_4_when_no_more_than_0_using_functional_programming() {\n          List<Item> items = Arrays.asList(\n            new Item(\"Normal item\", 1, 10),\n            new Item(\"Normal item\", 0, 10),\n            new Item(\"Aged Brie\", 1, 5),\n            new Item(\"Aged Brie\", 0, 6),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 0, 35),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 34),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 33),\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 32),\n            new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80),\n            new Item(\"Conjured\", 0, 45)\n        );\n\n        Stream<Item> itemStream = items.stream()\n            .filter(GildedRose.isConjured())\n            .filter(GildedRose.isSellInNoMoreThan0())\n            .map(GildedRose.generateUpdatedConjured());\n\n        List<Item> itemsUpdated = itemStream.collect(Collectors.toList());\n\n        assertEquals(1, itemsUpdated.size());\n        assertEquals(-1, itemsUpdated.get(0).sellIn);\n        assertEquals(41, itemsUpdated.get(0).quality);\n    }\n\n}","Item.java":"public class Item {\n\n    public String name;\n\n    public int sellIn;\n\n    public int quality;\n\n    public Item(String name, int sellIn, int quality) {\n        this.name = name;\n        this.sellIn = sellIn;\n        this.quality = quality;\n    }\n\n    public String toString() {\n        return this.name + \", \" + this.sellIn + \", \" + this.quality;\n    }\n}\n","StrategyFactory.java":"public class StrategyFactory{\n    public static StrategyItem create(String itemName){\n        if(itemName.equals(\"Sulfuras, Hand of Ragnaros\")){\n           return new StrategySulfuras();  \n        }\n\n        if(itemName.equals(\"Aged Brie\")){\n           return new StrategyAgedBrie();  \n        }\n\n        if(itemName.equals(\"Backstage passes to a TAFKAL80ETC concert\")){\n           return new StrategyBackstage();  \n        }\n\n        if(itemName.equals(\"Conjured\")){\n           return new StrategyConjured();  \n        }\n        \n        return new StrategyNormalItem();  \n        \n    }\n}","StrategyAgedBrie.java":"public class StrategyAgedBrie implements StrategyItem{\n\n    public void handle(Item item){\n        if (item.quality < 50) {\n            item.quality += 1;\n        }\n\n        item.sellIn -= 1;\n    \n        if (item.sellIn < 0) {\n           \n            if (item.quality < 50) {\n                item.quality += 1;\n            }                   \n        }\n    }\n}\n","StrategyItem.java":"public interface StrategyItem{\n    void handle(Item item);\n}","StrategySulfuras.java":"public class StrategySulfuras implements StrategyItem{\n\n    public void handle(Item item){\n    }\n}","StrategyBackstage.java":"public class StrategyBackstage implements StrategyItem{\n\n    public void handle(Item item){\n        if (item.quality < 50) {\n            item.quality += 1;\n            if (item.sellIn < 11) {\n                if (item.quality < 50) {\n                    item.quality += 1;\n                }\n            }\n            if (item.sellIn < 6) {\n                if (item.quality < 50) {\n                    item.quality += 1;\n                }\n            }\n        }\n\n        item.sellIn -= 1;\n\n        if (item.sellIn < 0) {             \n            item.quality = 0;                    \n        }\n    }\n}\n","StrategyNormalItem.java":"public class StrategyNormalItem implements StrategyItem{\n\n    public void handle(Item item){\n        if (item.quality > 0) {                    \n            item.quality -= 1;\n        }\n\n        item.sellIn -= 1;            \n\n        if (item.sellIn < 0) {\n     \n            if (item.quality > 0) {  \n                item.quality -= 1;                           \n            }\n        }\n    }\n}","StrategyConjured.java":"public class StrategyConjured implements StrategyItem{\n\n    public void handle(Item item){\n        if (item.quality > 0) {                    \n            item.quality -= 2;\n        }\n     \n        item.sellIn -= 1;            \n\n        if (item.sellIn < 0) {\n     \n            if (item.quality > 0) {  \n                item.quality -= 2;                           \n            }\n        }\n    }\n}\n"}